-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from src/HappyParser.y
-----------------------------------------------------------------------------

state 117 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> program                           (0)
	program -> declarations                            (1)
	declarations -> declarations declaration           (2)
	declarations -> declaration                        (3)
	declaration -> statement                           (4)
	declaration -> variable_declaration                (5)
	declaration -> function_declaration                (6)
	declaration -> class_declaration                   (7)
	statement -> expression_statement                  (8)
	statement -> print_statement                       (9)
	statement -> block_statement                       (10)
	statement -> conditional_statement                 (11)
	statement -> while_statement                       (12)
	statement -> for_statement                         (13)
	statement -> return_statement                      (14)
	expression_statement -> expression ';'             (15)
	print_statement -> 'print' expression ';'          (16)
	block_statement -> '{' declarations '}'            (17)
	conditional_statement -> 'if' '(' expression ')' statement   (18)
	conditional_statement -> 'if' '(' expression ')' statement 'else' statement   (19)
	while_statement -> 'while' '(' expression ')' statement   (20)
	for_statement -> 'for' '(' ';' ';' ')' statement   (21)
	for_statement -> 'for' '(' variable_declaration ';' ';' ')' statement   (22)
	for_statement -> 'for' '(' ';' expression ';' ')' statement   (23)
	for_statement -> 'for' '(' ';' ';' expression ')' statement   (24)
	for_statement -> 'for' '(' variable_declaration ';' expression ';' ')' statement   (25)
	for_statement -> 'for' '(' variable_declaration ';' ';' expression ')' statement   (26)
	for_statement -> 'for' '(' ';' expression ';' expression ')' statement   (27)
	for_statement -> 'for' '(' variable_declaration ';' expression ';' expression ')' statement   (28)
	return_statement -> 'return' expression ';'        (29)
	variable_declaration -> 'var' IDENTIFIER '=' expression ';'   (30)
	variable_declaration -> 'var' IDENTIFIER ';'       (31)
	variable_declaration -> IDENTIFIER '=' expression ';'   (32)
	class_declaration -> 'class' IDENTIFIER '{' methods '}'   (33)
	methods ->                                         (34)
	methods -> methods method_declaration              (35)
	function_declaration -> 'fun' IDENTIFIER '(' parameters ')' block_statement   (36)
	method_declaration -> IDENTIFIER '(' parameters ')' block_statement   (37)
	parameters -> parameters ',' IDENTIFIER            (38)
	parameters ->                                      (39)
	function_call -> IDENTIFIER '(' arguments ')'      (40)
	function_call -> function_call '(' arguments ')'   (41)
	arguments -> arguments ',' expression              (42)
	arguments ->                                       (43)
	expression -> literal                              (44)
	expression -> unary                                (45)
	expression -> binary                               (46)
	expression -> ternary                              (47)
	expression -> grouping                             (48)
	expression -> function_call                        (49)
	literal -> NUMBER                                  (50)
	literal -> STRING                                  (51)
	literal -> 'true'                                  (52)
	literal -> 'false'                                 (53)
	literal -> 'nil'                                   (54)
	grouping -> '(' expression ')'                     (55)
	unary -> '-' expression                            (56)
	unary -> '!' expression                            (57)
	binary -> expression '==' expression               (58)
	binary -> expression '!=' expression               (59)
	binary -> expression '+' expression                (60)
	binary -> expression '-' expression                (61)
	binary -> expression '*' expression                (62)
	binary -> expression '/' expression                (63)
	binary -> expression '>' expression                (64)
	binary -> expression '<' expression                (65)
	binary -> expression '>=' expression               (66)
	binary -> expression '<=' expression               (67)
	binary -> expression 'and' expression              (68)
	binary -> expression 'or' expression               (69)
	ternary -> expression '?' expression ':' expression   (70)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	NUMBER         { L.NUMBER $$ }
	STRING         { L.STRING $$ }
	IDENTIFIER     { L.IDENTIFIER $$ }
	'='            { L.EQUAL }
	'+'            { L.PLUS }
	'-'            { L.MINUS }
	'*'            { L.STAR }
	'/'            { L.SLASH }
	'('            { L.LEFT_PAREN }
	')'            { L.RIGHT_PAREN }
	'{'            { L.LEFT_BRACE }
	'}'            { L.RIGHT_BRACE }
	'!'            { L.BANG }
	'<'            { L.LESS }
	'>'            { L.GREATER }
	'<='           { L.LESS_EQUAL }
	'>='           { L.GREATER_EQUAL }
	'!='           { L.BANG_EQUAL }
	'=='           { L.EQUAL_EQUAL }
	'and'          { L.AND }
	'or'           { L.OR }
	'true'         { L.TRUE }
	'false'        { L.FALSE }
	'nil'          { L.NIL }
	';'            { L.SEMICOLON }
	','            { L.COMMA }
	'?'            { L.QUESTION_MARK }
	':'            { L.COLON }
	'print'        { L.PRINT }
	'var'          { L.VAR }
	'if'           { L.IF }
	'else'         { L.ELSE }
	'while'        { L.WHILE }
	'for'          { L.FOR }
	'fun'          { L.FUN }
	'return'       { L.RETURN }
	'class'        { L.CLASS }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	program         rule  1
	declarations    rules 2, 3
	declaration     rules 4, 5, 6, 7
	statement       rules 8, 9, 10, 11, 12, 13, 14
	expression_statement rule  15
	print_statement rule  16
	block_statement rule  17
	conditional_statement rules 18, 19
	while_statement rule  20
	for_statement   rules 21, 22, 23, 24, 25, 26, 27, 28
	return_statement rule  29
	variable_declaration rules 30, 31, 32
	class_declaration rule  33
	methods         rules 34, 35
	function_declaration rule  36
	method_declaration rule  37
	parameters      rules 38, 39
	function_call   rules 40, 41
	arguments       rules 42, 43
	expression      rules 44, 45, 46, 47, 48, 49
	literal         rules 50, 51, 52, 53, 54
	grouping        rule  55
	unary           rules 56, 57
	binary          rules 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69
	ternary         rule  70

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parser -> . program                          (rule 0)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 24
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'{'            shift, and enter state 27
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31
	'print'        shift, and enter state 32
	'var'          shift, and enter state 33
	'if'           shift, and enter state 34
	'while'        shift, and enter state 35
	'for'          shift, and enter state 36
	'fun'          shift, and enter state 37
	'return'       shift, and enter state 38
	'class'        shift, and enter state 39

	program        goto state 40
	declarations   goto state 2
	declaration    goto state 3
	statement      goto state 4
	expression_statementgoto state 5
	print_statementgoto state 6
	block_statementgoto state 7
	conditional_statementgoto state 8
	while_statementgoto state 9
	for_statement  goto state 10
	return_statementgoto state 11
	variable_declarationgoto state 12
	class_declarationgoto state 13
	function_declarationgoto state 14
	function_call  goto state 15
	expression     goto state 16
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 1

	program -> . declarations                           (rule 1)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 24
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'{'            shift, and enter state 27
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31
	'print'        shift, and enter state 32
	'var'          shift, and enter state 33
	'if'           shift, and enter state 34
	'while'        shift, and enter state 35
	'for'          shift, and enter state 36
	'fun'          shift, and enter state 37
	'return'       shift, and enter state 38
	'class'        shift, and enter state 39

	declarations   goto state 2
	declaration    goto state 3
	statement      goto state 4
	expression_statementgoto state 5
	print_statementgoto state 6
	block_statementgoto state 7
	conditional_statementgoto state 8
	while_statementgoto state 9
	for_statement  goto state 10
	return_statementgoto state 11
	variable_declarationgoto state 12
	class_declarationgoto state 13
	function_declarationgoto state 14
	function_call  goto state 15
	expression     goto state 16
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 2

	program -> declarations .                           (rule 1)
	declarations -> declarations . declaration          (rule 2)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 24
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'{'            shift, and enter state 27
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31
	'print'        shift, and enter state 32
	'var'          shift, and enter state 33
	'if'           shift, and enter state 34
	'while'        shift, and enter state 35
	'for'          shift, and enter state 36
	'fun'          shift, and enter state 37
	'return'       shift, and enter state 38
	'class'        shift, and enter state 39
	%eof           reduce using rule 1

	declaration    goto state 71
	statement      goto state 4
	expression_statementgoto state 5
	print_statementgoto state 6
	block_statementgoto state 7
	conditional_statementgoto state 8
	while_statementgoto state 9
	for_statement  goto state 10
	return_statementgoto state 11
	variable_declarationgoto state 12
	class_declarationgoto state 13
	function_declarationgoto state 14
	function_call  goto state 15
	expression     goto state 16
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 3

	declarations -> declaration .                       (rule 3)

	NUMBER         reduce using rule 3
	STRING         reduce using rule 3
	IDENTIFIER     reduce using rule 3
	'-'            reduce using rule 3
	'('            reduce using rule 3
	'{'            reduce using rule 3
	'}'            reduce using rule 3
	'!'            reduce using rule 3
	'true'         reduce using rule 3
	'false'        reduce using rule 3
	'nil'          reduce using rule 3
	'print'        reduce using rule 3
	'var'          reduce using rule 3
	'if'           reduce using rule 3
	'while'        reduce using rule 3
	'for'          reduce using rule 3
	'fun'          reduce using rule 3
	'return'       reduce using rule 3
	'class'        reduce using rule 3
	%eof           reduce using rule 3


State 4

	declaration -> statement .                          (rule 4)

	NUMBER         reduce using rule 4
	STRING         reduce using rule 4
	IDENTIFIER     reduce using rule 4
	'-'            reduce using rule 4
	'('            reduce using rule 4
	'{'            reduce using rule 4
	'}'            reduce using rule 4
	'!'            reduce using rule 4
	'true'         reduce using rule 4
	'false'        reduce using rule 4
	'nil'          reduce using rule 4
	'print'        reduce using rule 4
	'var'          reduce using rule 4
	'if'           reduce using rule 4
	'while'        reduce using rule 4
	'for'          reduce using rule 4
	'fun'          reduce using rule 4
	'return'       reduce using rule 4
	'class'        reduce using rule 4
	%eof           reduce using rule 4


State 5

	statement -> expression_statement .                 (rule 8)

	NUMBER         reduce using rule 8
	STRING         reduce using rule 8
	IDENTIFIER     reduce using rule 8
	'-'            reduce using rule 8
	'('            reduce using rule 8
	'{'            reduce using rule 8
	'}'            reduce using rule 8
	'!'            reduce using rule 8
	'true'         reduce using rule 8
	'false'        reduce using rule 8
	'nil'          reduce using rule 8
	'print'        reduce using rule 8
	'var'          reduce using rule 8
	'if'           reduce using rule 8
	'else'         reduce using rule 8
	'while'        reduce using rule 8
	'for'          reduce using rule 8
	'fun'          reduce using rule 8
	'return'       reduce using rule 8
	'class'        reduce using rule 8
	%eof           reduce using rule 8


State 6

	statement -> print_statement .                      (rule 9)

	NUMBER         reduce using rule 9
	STRING         reduce using rule 9
	IDENTIFIER     reduce using rule 9
	'-'            reduce using rule 9
	'('            reduce using rule 9
	'{'            reduce using rule 9
	'}'            reduce using rule 9
	'!'            reduce using rule 9
	'true'         reduce using rule 9
	'false'        reduce using rule 9
	'nil'          reduce using rule 9
	'print'        reduce using rule 9
	'var'          reduce using rule 9
	'if'           reduce using rule 9
	'else'         reduce using rule 9
	'while'        reduce using rule 9
	'for'          reduce using rule 9
	'fun'          reduce using rule 9
	'return'       reduce using rule 9
	'class'        reduce using rule 9
	%eof           reduce using rule 9


State 7

	statement -> block_statement .                      (rule 10)

	NUMBER         reduce using rule 10
	STRING         reduce using rule 10
	IDENTIFIER     reduce using rule 10
	'-'            reduce using rule 10
	'('            reduce using rule 10
	'{'            reduce using rule 10
	'}'            reduce using rule 10
	'!'            reduce using rule 10
	'true'         reduce using rule 10
	'false'        reduce using rule 10
	'nil'          reduce using rule 10
	'print'        reduce using rule 10
	'var'          reduce using rule 10
	'if'           reduce using rule 10
	'else'         reduce using rule 10
	'while'        reduce using rule 10
	'for'          reduce using rule 10
	'fun'          reduce using rule 10
	'return'       reduce using rule 10
	'class'        reduce using rule 10
	%eof           reduce using rule 10


State 8

	statement -> conditional_statement .                (rule 11)

	NUMBER         reduce using rule 11
	STRING         reduce using rule 11
	IDENTIFIER     reduce using rule 11
	'-'            reduce using rule 11
	'('            reduce using rule 11
	'{'            reduce using rule 11
	'}'            reduce using rule 11
	'!'            reduce using rule 11
	'true'         reduce using rule 11
	'false'        reduce using rule 11
	'nil'          reduce using rule 11
	'print'        reduce using rule 11
	'var'          reduce using rule 11
	'if'           reduce using rule 11
	'else'         reduce using rule 11
	'while'        reduce using rule 11
	'for'          reduce using rule 11
	'fun'          reduce using rule 11
	'return'       reduce using rule 11
	'class'        reduce using rule 11
	%eof           reduce using rule 11


State 9

	statement -> while_statement .                      (rule 12)

	NUMBER         reduce using rule 12
	STRING         reduce using rule 12
	IDENTIFIER     reduce using rule 12
	'-'            reduce using rule 12
	'('            reduce using rule 12
	'{'            reduce using rule 12
	'}'            reduce using rule 12
	'!'            reduce using rule 12
	'true'         reduce using rule 12
	'false'        reduce using rule 12
	'nil'          reduce using rule 12
	'print'        reduce using rule 12
	'var'          reduce using rule 12
	'if'           reduce using rule 12
	'else'         reduce using rule 12
	'while'        reduce using rule 12
	'for'          reduce using rule 12
	'fun'          reduce using rule 12
	'return'       reduce using rule 12
	'class'        reduce using rule 12
	%eof           reduce using rule 12


State 10

	statement -> for_statement .                        (rule 13)

	NUMBER         reduce using rule 13
	STRING         reduce using rule 13
	IDENTIFIER     reduce using rule 13
	'-'            reduce using rule 13
	'('            reduce using rule 13
	'{'            reduce using rule 13
	'}'            reduce using rule 13
	'!'            reduce using rule 13
	'true'         reduce using rule 13
	'false'        reduce using rule 13
	'nil'          reduce using rule 13
	'print'        reduce using rule 13
	'var'          reduce using rule 13
	'if'           reduce using rule 13
	'else'         reduce using rule 13
	'while'        reduce using rule 13
	'for'          reduce using rule 13
	'fun'          reduce using rule 13
	'return'       reduce using rule 13
	'class'        reduce using rule 13
	%eof           reduce using rule 13


State 11

	statement -> return_statement .                     (rule 14)

	NUMBER         reduce using rule 14
	STRING         reduce using rule 14
	IDENTIFIER     reduce using rule 14
	'-'            reduce using rule 14
	'('            reduce using rule 14
	'{'            reduce using rule 14
	'}'            reduce using rule 14
	'!'            reduce using rule 14
	'true'         reduce using rule 14
	'false'        reduce using rule 14
	'nil'          reduce using rule 14
	'print'        reduce using rule 14
	'var'          reduce using rule 14
	'if'           reduce using rule 14
	'else'         reduce using rule 14
	'while'        reduce using rule 14
	'for'          reduce using rule 14
	'fun'          reduce using rule 14
	'return'       reduce using rule 14
	'class'        reduce using rule 14
	%eof           reduce using rule 14


State 12

	declaration -> variable_declaration .               (rule 5)

	NUMBER         reduce using rule 5
	STRING         reduce using rule 5
	IDENTIFIER     reduce using rule 5
	'-'            reduce using rule 5
	'('            reduce using rule 5
	'{'            reduce using rule 5
	'}'            reduce using rule 5
	'!'            reduce using rule 5
	'true'         reduce using rule 5
	'false'        reduce using rule 5
	'nil'          reduce using rule 5
	'print'        reduce using rule 5
	'var'          reduce using rule 5
	'if'           reduce using rule 5
	'while'        reduce using rule 5
	'for'          reduce using rule 5
	'fun'          reduce using rule 5
	'return'       reduce using rule 5
	'class'        reduce using rule 5
	%eof           reduce using rule 5


State 13

	declaration -> class_declaration .                  (rule 7)

	NUMBER         reduce using rule 7
	STRING         reduce using rule 7
	IDENTIFIER     reduce using rule 7
	'-'            reduce using rule 7
	'('            reduce using rule 7
	'{'            reduce using rule 7
	'}'            reduce using rule 7
	'!'            reduce using rule 7
	'true'         reduce using rule 7
	'false'        reduce using rule 7
	'nil'          reduce using rule 7
	'print'        reduce using rule 7
	'var'          reduce using rule 7
	'if'           reduce using rule 7
	'while'        reduce using rule 7
	'for'          reduce using rule 7
	'fun'          reduce using rule 7
	'return'       reduce using rule 7
	'class'        reduce using rule 7
	%eof           reduce using rule 7


State 14

	declaration -> function_declaration .               (rule 6)

	NUMBER         reduce using rule 6
	STRING         reduce using rule 6
	IDENTIFIER     reduce using rule 6
	'-'            reduce using rule 6
	'('            reduce using rule 6
	'{'            reduce using rule 6
	'}'            reduce using rule 6
	'!'            reduce using rule 6
	'true'         reduce using rule 6
	'false'        reduce using rule 6
	'nil'          reduce using rule 6
	'print'        reduce using rule 6
	'var'          reduce using rule 6
	'if'           reduce using rule 6
	'while'        reduce using rule 6
	'for'          reduce using rule 6
	'fun'          reduce using rule 6
	'return'       reduce using rule 6
	'class'        reduce using rule 6
	%eof           reduce using rule 6


State 15

	function_call -> function_call . '(' arguments ')'    (rule 41)
	expression -> function_call .                       (rule 49)

	'+'            reduce using rule 49
	'-'            reduce using rule 49
	'*'            reduce using rule 49
	'/'            reduce using rule 49
	'('            shift, and enter state 70
	')'            reduce using rule 49
	'<'            reduce using rule 49
	'>'            reduce using rule 49
	'<='           reduce using rule 49
	'>='           reduce using rule 49
	'!='           reduce using rule 49
	'=='           reduce using rule 49
	'and'          reduce using rule 49
	'or'           reduce using rule 49
	';'            reduce using rule 49
	','            reduce using rule 49
	'?'            reduce using rule 49
	':'            reduce using rule 49


State 16

	expression_statement -> expression . ';'            (rule 15)
	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	'<'            shift, and enter state 60
	'>'            shift, and enter state 61
	'<='           shift, and enter state 62
	'>='           shift, and enter state 63
	'!='           shift, and enter state 64
	'=='           shift, and enter state 65
	'and'          shift, and enter state 66
	'or'           shift, and enter state 67
	';'            shift, and enter state 68
	'?'            shift, and enter state 69


State 17

	expression -> literal .                             (rule 44)

	'+'            reduce using rule 44
	'-'            reduce using rule 44
	'*'            reduce using rule 44
	'/'            reduce using rule 44
	')'            reduce using rule 44
	'<'            reduce using rule 44
	'>'            reduce using rule 44
	'<='           reduce using rule 44
	'>='           reduce using rule 44
	'!='           reduce using rule 44
	'=='           reduce using rule 44
	'and'          reduce using rule 44
	'or'           reduce using rule 44
	';'            reduce using rule 44
	','            reduce using rule 44
	'?'            reduce using rule 44
	':'            reduce using rule 44


State 18

	expression -> grouping .                            (rule 48)

	'+'            reduce using rule 48
	'-'            reduce using rule 48
	'*'            reduce using rule 48
	'/'            reduce using rule 48
	')'            reduce using rule 48
	'<'            reduce using rule 48
	'>'            reduce using rule 48
	'<='           reduce using rule 48
	'>='           reduce using rule 48
	'!='           reduce using rule 48
	'=='           reduce using rule 48
	'and'          reduce using rule 48
	'or'           reduce using rule 48
	';'            reduce using rule 48
	','            reduce using rule 48
	'?'            reduce using rule 48
	':'            reduce using rule 48


State 19

	expression -> unary .                               (rule 45)

	'+'            reduce using rule 45
	'-'            reduce using rule 45
	'*'            reduce using rule 45
	'/'            reduce using rule 45
	')'            reduce using rule 45
	'<'            reduce using rule 45
	'>'            reduce using rule 45
	'<='           reduce using rule 45
	'>='           reduce using rule 45
	'!='           reduce using rule 45
	'=='           reduce using rule 45
	'and'          reduce using rule 45
	'or'           reduce using rule 45
	';'            reduce using rule 45
	','            reduce using rule 45
	'?'            reduce using rule 45
	':'            reduce using rule 45


State 20

	expression -> binary .                              (rule 46)

	'+'            reduce using rule 46
	'-'            reduce using rule 46
	'*'            reduce using rule 46
	'/'            reduce using rule 46
	')'            reduce using rule 46
	'<'            reduce using rule 46
	'>'            reduce using rule 46
	'<='           reduce using rule 46
	'>='           reduce using rule 46
	'!='           reduce using rule 46
	'=='           reduce using rule 46
	'and'          reduce using rule 46
	'or'           reduce using rule 46
	';'            reduce using rule 46
	','            reduce using rule 46
	'?'            reduce using rule 46
	':'            reduce using rule 46


State 21

	expression -> ternary .                             (rule 47)

	'+'            reduce using rule 47
	'-'            reduce using rule 47
	'*'            reduce using rule 47
	'/'            reduce using rule 47
	')'            reduce using rule 47
	'<'            reduce using rule 47
	'>'            reduce using rule 47
	'<='           reduce using rule 47
	'>='           reduce using rule 47
	'!='           reduce using rule 47
	'=='           reduce using rule 47
	'and'          reduce using rule 47
	'or'           reduce using rule 47
	';'            reduce using rule 47
	','            reduce using rule 47
	'?'            reduce using rule 47
	':'            reduce using rule 47


State 22

	literal -> NUMBER .                                 (rule 50)

	'+'            reduce using rule 50
	'-'            reduce using rule 50
	'*'            reduce using rule 50
	'/'            reduce using rule 50
	')'            reduce using rule 50
	'<'            reduce using rule 50
	'>'            reduce using rule 50
	'<='           reduce using rule 50
	'>='           reduce using rule 50
	'!='           reduce using rule 50
	'=='           reduce using rule 50
	'and'          reduce using rule 50
	'or'           reduce using rule 50
	';'            reduce using rule 50
	','            reduce using rule 50
	'?'            reduce using rule 50
	':'            reduce using rule 50


State 23

	literal -> STRING .                                 (rule 51)

	'+'            reduce using rule 51
	'-'            reduce using rule 51
	'*'            reduce using rule 51
	'/'            reduce using rule 51
	')'            reduce using rule 51
	'<'            reduce using rule 51
	'>'            reduce using rule 51
	'<='           reduce using rule 51
	'>='           reduce using rule 51
	'!='           reduce using rule 51
	'=='           reduce using rule 51
	'and'          reduce using rule 51
	'or'           reduce using rule 51
	';'            reduce using rule 51
	','            reduce using rule 51
	'?'            reduce using rule 51
	':'            reduce using rule 51


State 24

	variable_declaration -> IDENTIFIER . '=' expression ';'    (rule 32)
	function_call -> IDENTIFIER . '(' arguments ')'     (rule 40)

	'='            shift, and enter state 54
	'('            shift, and enter state 55


State 25

	unary -> '-' . expression                           (rule 56)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 53
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 26

	grouping -> '(' . expression ')'                    (rule 55)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 52
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 27

	block_statement -> '{' . declarations '}'           (rule 17)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 24
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'{'            shift, and enter state 27
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31
	'print'        shift, and enter state 32
	'var'          shift, and enter state 33
	'if'           shift, and enter state 34
	'while'        shift, and enter state 35
	'for'          shift, and enter state 36
	'fun'          shift, and enter state 37
	'return'       shift, and enter state 38
	'class'        shift, and enter state 39

	declarations   goto state 51
	declaration    goto state 3
	statement      goto state 4
	expression_statementgoto state 5
	print_statementgoto state 6
	block_statementgoto state 7
	conditional_statementgoto state 8
	while_statementgoto state 9
	for_statement  goto state 10
	return_statementgoto state 11
	variable_declarationgoto state 12
	class_declarationgoto state 13
	function_declarationgoto state 14
	function_call  goto state 15
	expression     goto state 16
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 28

	unary -> '!' . expression                           (rule 57)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 50
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 29

	literal -> 'true' .                                 (rule 52)

	'+'            reduce using rule 52
	'-'            reduce using rule 52
	'*'            reduce using rule 52
	'/'            reduce using rule 52
	')'            reduce using rule 52
	'<'            reduce using rule 52
	'>'            reduce using rule 52
	'<='           reduce using rule 52
	'>='           reduce using rule 52
	'!='           reduce using rule 52
	'=='           reduce using rule 52
	'and'          reduce using rule 52
	'or'           reduce using rule 52
	';'            reduce using rule 52
	','            reduce using rule 52
	'?'            reduce using rule 52
	':'            reduce using rule 52


State 30

	literal -> 'false' .                                (rule 53)

	'+'            reduce using rule 53
	'-'            reduce using rule 53
	'*'            reduce using rule 53
	'/'            reduce using rule 53
	')'            reduce using rule 53
	'<'            reduce using rule 53
	'>'            reduce using rule 53
	'<='           reduce using rule 53
	'>='           reduce using rule 53
	'!='           reduce using rule 53
	'=='           reduce using rule 53
	'and'          reduce using rule 53
	'or'           reduce using rule 53
	';'            reduce using rule 53
	','            reduce using rule 53
	'?'            reduce using rule 53
	':'            reduce using rule 53


State 31

	literal -> 'nil' .                                  (rule 54)

	'+'            reduce using rule 54
	'-'            reduce using rule 54
	'*'            reduce using rule 54
	'/'            reduce using rule 54
	')'            reduce using rule 54
	'<'            reduce using rule 54
	'>'            reduce using rule 54
	'<='           reduce using rule 54
	'>='           reduce using rule 54
	'!='           reduce using rule 54
	'=='           reduce using rule 54
	'and'          reduce using rule 54
	'or'           reduce using rule 54
	';'            reduce using rule 54
	','            reduce using rule 54
	'?'            reduce using rule 54
	':'            reduce using rule 54


State 32

	print_statement -> 'print' . expression ';'         (rule 16)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 49
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 33

	variable_declaration -> 'var' . IDENTIFIER '=' expression ';'    (rule 30)
	variable_declaration -> 'var' . IDENTIFIER ';'      (rule 31)

	IDENTIFIER     shift, and enter state 48


State 34

	conditional_statement -> 'if' . '(' expression ')' statement    (rule 18)
	conditional_statement -> 'if' . '(' expression ')' statement 'else' statement    (rule 19)

	'('            shift, and enter state 47


State 35

	while_statement -> 'while' . '(' expression ')' statement    (rule 20)

	'('            shift, and enter state 46


State 36

	for_statement -> 'for' . '(' ';' ';' ')' statement    (rule 21)
	for_statement -> 'for' . '(' variable_declaration ';' ';' ')' statement    (rule 22)
	for_statement -> 'for' . '(' ';' expression ';' ')' statement    (rule 23)
	for_statement -> 'for' . '(' ';' ';' expression ')' statement    (rule 24)
	for_statement -> 'for' . '(' variable_declaration ';' expression ';' ')' statement    (rule 25)
	for_statement -> 'for' . '(' variable_declaration ';' ';' expression ')' statement    (rule 26)
	for_statement -> 'for' . '(' ';' expression ';' expression ')' statement    (rule 27)
	for_statement -> 'for' . '(' variable_declaration ';' expression ';' expression ')' statement    (rule 28)

	'('            shift, and enter state 45


State 37

	function_declaration -> 'fun' . IDENTIFIER '(' parameters ')' block_statement    (rule 36)

	IDENTIFIER     shift, and enter state 44


State 38

	return_statement -> 'return' . expression ';'       (rule 29)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 42
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 39

	class_declaration -> 'class' . IDENTIFIER '{' methods '}'    (rule 33)

	IDENTIFIER     shift, and enter state 41


State 40

	%start_parser -> program .                          (rule 0)

	%eof           accept


State 41

	class_declaration -> 'class' IDENTIFIER . '{' methods '}'    (rule 33)

	'{'            shift, and enter state 100


State 42

	return_statement -> 'return' expression . ';'       (rule 29)
	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	'<'            shift, and enter state 60
	'>'            shift, and enter state 61
	'<='           shift, and enter state 62
	'>='           shift, and enter state 63
	'!='           shift, and enter state 64
	'=='           shift, and enter state 65
	'and'          shift, and enter state 66
	'or'           shift, and enter state 67
	';'            shift, and enter state 99
	'?'            shift, and enter state 69


State 43

	function_call -> IDENTIFIER . '(' arguments ')'     (rule 40)

	'('            shift, and enter state 55


State 44

	function_declaration -> 'fun' IDENTIFIER . '(' parameters ')' block_statement    (rule 36)

	'('            shift, and enter state 98


State 45

	for_statement -> 'for' '(' . ';' ';' ')' statement    (rule 21)
	for_statement -> 'for' '(' . variable_declaration ';' ';' ')' statement    (rule 22)
	for_statement -> 'for' '(' . ';' expression ';' ')' statement    (rule 23)
	for_statement -> 'for' '(' . ';' ';' expression ')' statement    (rule 24)
	for_statement -> 'for' '(' . variable_declaration ';' expression ';' ')' statement    (rule 25)
	for_statement -> 'for' '(' . variable_declaration ';' ';' expression ')' statement    (rule 26)
	for_statement -> 'for' '(' . ';' expression ';' expression ')' statement    (rule 27)
	for_statement -> 'for' '(' . variable_declaration ';' expression ';' expression ')' statement    (rule 28)

	IDENTIFIER     shift, and enter state 96
	';'            shift, and enter state 97
	'var'          shift, and enter state 33

	variable_declarationgoto state 95

State 46

	while_statement -> 'while' '(' . expression ')' statement    (rule 20)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 94
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 47

	conditional_statement -> 'if' '(' . expression ')' statement    (rule 18)
	conditional_statement -> 'if' '(' . expression ')' statement 'else' statement    (rule 19)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 93
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 48

	variable_declaration -> 'var' IDENTIFIER . '=' expression ';'    (rule 30)
	variable_declaration -> 'var' IDENTIFIER . ';'      (rule 31)

	'='            shift, and enter state 91
	';'            shift, and enter state 92


State 49

	print_statement -> 'print' expression . ';'         (rule 16)
	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	'<'            shift, and enter state 60
	'>'            shift, and enter state 61
	'<='           shift, and enter state 62
	'>='           shift, and enter state 63
	'!='           shift, and enter state 64
	'=='           shift, and enter state 65
	'and'          shift, and enter state 66
	'or'           shift, and enter state 67
	';'            shift, and enter state 90
	'?'            shift, and enter state 69


State 50

	unary -> '!' expression .                           (rule 57)
	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            reduce using rule 57
	'-'            reduce using rule 57
	'*'            reduce using rule 57
	'/'            reduce using rule 57
	')'            reduce using rule 57
	'<'            reduce using rule 57
	'>'            reduce using rule 57
	'<='           reduce using rule 57
	'>='           reduce using rule 57
	'!='           reduce using rule 57
	'=='           reduce using rule 57
	'and'          reduce using rule 57
	'or'           reduce using rule 57
	';'            reduce using rule 57
	','            reduce using rule 57
	'?'            reduce using rule 57
	':'            reduce using rule 57


State 51

	declarations -> declarations . declaration          (rule 2)
	block_statement -> '{' declarations . '}'           (rule 17)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 24
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'{'            shift, and enter state 27
	'}'            shift, and enter state 89
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31
	'print'        shift, and enter state 32
	'var'          shift, and enter state 33
	'if'           shift, and enter state 34
	'while'        shift, and enter state 35
	'for'          shift, and enter state 36
	'fun'          shift, and enter state 37
	'return'       shift, and enter state 38
	'class'        shift, and enter state 39

	declaration    goto state 71
	statement      goto state 4
	expression_statementgoto state 5
	print_statementgoto state 6
	block_statementgoto state 7
	conditional_statementgoto state 8
	while_statementgoto state 9
	for_statement  goto state 10
	return_statementgoto state 11
	variable_declarationgoto state 12
	class_declarationgoto state 13
	function_declarationgoto state 14
	function_call  goto state 15
	expression     goto state 16
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 52

	grouping -> '(' expression . ')'                    (rule 55)
	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	')'            shift, and enter state 88
	'<'            shift, and enter state 60
	'>'            shift, and enter state 61
	'<='           shift, and enter state 62
	'>='           shift, and enter state 63
	'!='           shift, and enter state 64
	'=='           shift, and enter state 65
	'and'          shift, and enter state 66
	'or'           shift, and enter state 67
	'?'            shift, and enter state 69


State 53

	unary -> '-' expression .                           (rule 56)
	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            reduce using rule 56
	'-'            reduce using rule 56
	'*'            reduce using rule 56
	'/'            reduce using rule 56
	')'            reduce using rule 56
	'<'            reduce using rule 56
	'>'            reduce using rule 56
	'<='           reduce using rule 56
	'>='           reduce using rule 56
	'!='           reduce using rule 56
	'=='           reduce using rule 56
	'and'          reduce using rule 56
	'or'           reduce using rule 56
	';'            reduce using rule 56
	','            reduce using rule 56
	'?'            reduce using rule 56
	':'            reduce using rule 56


State 54

	variable_declaration -> IDENTIFIER '=' . expression ';'    (rule 32)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 87
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 55

	function_call -> IDENTIFIER '(' . arguments ')'     (rule 40)

	')'            reduce using rule 43
	','            reduce using rule 43

	arguments      goto state 86

State 56

	binary -> expression '+' . expression               (rule 60)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 85
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 57

	binary -> expression '-' . expression               (rule 61)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 84
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 58

	binary -> expression '*' . expression               (rule 62)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 83
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 59

	binary -> expression '/' . expression               (rule 63)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 82
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 60

	binary -> expression '<' . expression               (rule 65)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 81
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 61

	binary -> expression '>' . expression               (rule 64)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 80
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 62

	binary -> expression '<=' . expression              (rule 67)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 79
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 63

	binary -> expression '>=' . expression              (rule 66)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 78
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 64

	binary -> expression '!=' . expression              (rule 59)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 77
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 65

	binary -> expression '==' . expression              (rule 58)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 76
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 66

	binary -> expression 'and' . expression             (rule 68)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 75
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 67

	binary -> expression 'or' . expression              (rule 69)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 74
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 68

	expression_statement -> expression ';' .            (rule 15)

	NUMBER         reduce using rule 15
	STRING         reduce using rule 15
	IDENTIFIER     reduce using rule 15
	'-'            reduce using rule 15
	'('            reduce using rule 15
	'{'            reduce using rule 15
	'}'            reduce using rule 15
	'!'            reduce using rule 15
	'true'         reduce using rule 15
	'false'        reduce using rule 15
	'nil'          reduce using rule 15
	'print'        reduce using rule 15
	'var'          reduce using rule 15
	'if'           reduce using rule 15
	'else'         reduce using rule 15
	'while'        reduce using rule 15
	'for'          reduce using rule 15
	'fun'          reduce using rule 15
	'return'       reduce using rule 15
	'class'        reduce using rule 15
	%eof           reduce using rule 15


State 69

	ternary -> expression '?' . expression ':' expression    (rule 70)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 73
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 70

	function_call -> function_call '(' . arguments ')'    (rule 41)

	')'            reduce using rule 43
	','            reduce using rule 43

	arguments      goto state 72

State 71

	declarations -> declarations declaration .          (rule 2)

	NUMBER         reduce using rule 2
	STRING         reduce using rule 2
	IDENTIFIER     reduce using rule 2
	'-'            reduce using rule 2
	'('            reduce using rule 2
	'{'            reduce using rule 2
	'}'            reduce using rule 2
	'!'            reduce using rule 2
	'true'         reduce using rule 2
	'false'        reduce using rule 2
	'nil'          reduce using rule 2
	'print'        reduce using rule 2
	'var'          reduce using rule 2
	'if'           reduce using rule 2
	'while'        reduce using rule 2
	'for'          reduce using rule 2
	'fun'          reduce using rule 2
	'return'       reduce using rule 2
	'class'        reduce using rule 2
	%eof           reduce using rule 2


State 72

	function_call -> function_call '(' arguments . ')'    (rule 41)
	arguments -> arguments . ',' expression             (rule 42)

	')'            shift, and enter state 113
	','            shift, and enter state 111


State 73

	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)
	ternary -> expression '?' expression . ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	'<'            shift, and enter state 60
	'>'            shift, and enter state 61
	'<='           shift, and enter state 62
	'>='           shift, and enter state 63
	'!='           shift, and enter state 64
	'=='           shift, and enter state 65
	'and'          shift, and enter state 66
	'or'           shift, and enter state 67
	'?'            shift, and enter state 69
	':'            shift, and enter state 112


State 74

	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	binary -> expression 'or' expression .              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	')'            reduce using rule 69
	'<'            shift, and enter state 60
	'>'            shift, and enter state 61
	'<='           shift, and enter state 62
	'>='           shift, and enter state 63
	'!='           shift, and enter state 64
	'=='           shift, and enter state 65
	'and'          reduce using rule 69
	'or'           reduce using rule 69
	';'            reduce using rule 69
	','            reduce using rule 69
	'?'            reduce using rule 69
	':'            reduce using rule 69


State 75

	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression 'and' expression .             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	')'            reduce using rule 68
	'<'            shift, and enter state 60
	'>'            shift, and enter state 61
	'<='           shift, and enter state 62
	'>='           shift, and enter state 63
	'!='           shift, and enter state 64
	'=='           shift, and enter state 65
	'and'          reduce using rule 68
	'or'           reduce using rule 68
	';'            reduce using rule 68
	','            reduce using rule 68
	'?'            reduce using rule 68
	':'            reduce using rule 68


State 76

	binary -> expression . '==' expression              (rule 58)
	binary -> expression '==' expression .              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	')'            reduce using rule 58
	'<'            shift, and enter state 60
	'>'            shift, and enter state 61
	'<='           shift, and enter state 62
	'>='           shift, and enter state 63
	'!='           reduce using rule 58
	'=='           reduce using rule 58
	'and'          reduce using rule 58
	'or'           reduce using rule 58
	';'            reduce using rule 58
	','            reduce using rule 58
	'?'            reduce using rule 58
	':'            reduce using rule 58


State 77

	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression '!=' expression .              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	')'            reduce using rule 59
	'<'            shift, and enter state 60
	'>'            shift, and enter state 61
	'<='           shift, and enter state 62
	'>='           shift, and enter state 63
	'!='           reduce using rule 59
	'=='           reduce using rule 59
	'and'          reduce using rule 59
	'or'           reduce using rule 59
	';'            reduce using rule 59
	','            reduce using rule 59
	'?'            reduce using rule 59
	':'            reduce using rule 59


State 78

	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression '>=' expression .              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	')'            reduce using rule 66
	'<'            reduce using rule 66
	'>'            reduce using rule 66
	'<='           reduce using rule 66
	'>='           reduce using rule 66
	'!='           reduce using rule 66
	'=='           reduce using rule 66
	'and'          reduce using rule 66
	'or'           reduce using rule 66
	';'            reduce using rule 66
	','            reduce using rule 66
	'?'            reduce using rule 66
	':'            reduce using rule 66


State 79

	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression '<=' expression .              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	')'            reduce using rule 67
	'<'            reduce using rule 67
	'>'            reduce using rule 67
	'<='           reduce using rule 67
	'>='           reduce using rule 67
	'!='           reduce using rule 67
	'=='           reduce using rule 67
	'and'          reduce using rule 67
	'or'           reduce using rule 67
	';'            reduce using rule 67
	','            reduce using rule 67
	'?'            reduce using rule 67
	':'            reduce using rule 67


State 80

	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression '>' expression .               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	')'            reduce using rule 64
	'<'            reduce using rule 64
	'>'            reduce using rule 64
	'<='           reduce using rule 64
	'>='           reduce using rule 64
	'!='           reduce using rule 64
	'=='           reduce using rule 64
	'and'          reduce using rule 64
	'or'           reduce using rule 64
	';'            reduce using rule 64
	','            reduce using rule 64
	'?'            reduce using rule 64
	':'            reduce using rule 64


State 81

	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression '<' expression .               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	')'            reduce using rule 65
	'<'            reduce using rule 65
	'>'            reduce using rule 65
	'<='           reduce using rule 65
	'>='           reduce using rule 65
	'!='           reduce using rule 65
	'=='           reduce using rule 65
	'and'          reduce using rule 65
	'or'           reduce using rule 65
	';'            reduce using rule 65
	','            reduce using rule 65
	'?'            reduce using rule 65
	':'            reduce using rule 65


State 82

	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression '/' expression .               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            reduce using rule 63
	'-'            reduce using rule 63
	'*'            reduce using rule 63
	'/'            reduce using rule 63
	')'            reduce using rule 63
	'<'            reduce using rule 63
	'>'            reduce using rule 63
	'<='           reduce using rule 63
	'>='           reduce using rule 63
	'!='           reduce using rule 63
	'=='           reduce using rule 63
	'and'          reduce using rule 63
	'or'           reduce using rule 63
	';'            reduce using rule 63
	','            reduce using rule 63
	'?'            reduce using rule 63
	':'            reduce using rule 63


State 83

	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression '*' expression .               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            reduce using rule 62
	'-'            reduce using rule 62
	'*'            reduce using rule 62
	'/'            reduce using rule 62
	')'            reduce using rule 62
	'<'            reduce using rule 62
	'>'            reduce using rule 62
	'<='           reduce using rule 62
	'>='           reduce using rule 62
	'!='           reduce using rule 62
	'=='           reduce using rule 62
	'and'          reduce using rule 62
	'or'           reduce using rule 62
	';'            reduce using rule 62
	','            reduce using rule 62
	'?'            reduce using rule 62
	':'            reduce using rule 62


State 84

	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression '-' expression .               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            reduce using rule 61
	'-'            reduce using rule 61
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	')'            reduce using rule 61
	'<'            reduce using rule 61
	'>'            reduce using rule 61
	'<='           reduce using rule 61
	'>='           reduce using rule 61
	'!='           reduce using rule 61
	'=='           reduce using rule 61
	'and'          reduce using rule 61
	'or'           reduce using rule 61
	';'            reduce using rule 61
	','            reduce using rule 61
	'?'            reduce using rule 61
	':'            reduce using rule 61


State 85

	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression '+' expression .               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            reduce using rule 60
	'-'            reduce using rule 60
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	')'            reduce using rule 60
	'<'            reduce using rule 60
	'>'            reduce using rule 60
	'<='           reduce using rule 60
	'>='           reduce using rule 60
	'!='           reduce using rule 60
	'=='           reduce using rule 60
	'and'          reduce using rule 60
	'or'           reduce using rule 60
	';'            reduce using rule 60
	','            reduce using rule 60
	'?'            reduce using rule 60
	':'            reduce using rule 60


State 86

	function_call -> IDENTIFIER '(' arguments . ')'     (rule 40)
	arguments -> arguments . ',' expression             (rule 42)

	')'            shift, and enter state 110
	','            shift, and enter state 111


State 87

	variable_declaration -> IDENTIFIER '=' expression . ';'    (rule 32)
	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	'<'            shift, and enter state 60
	'>'            shift, and enter state 61
	'<='           shift, and enter state 62
	'>='           shift, and enter state 63
	'!='           shift, and enter state 64
	'=='           shift, and enter state 65
	'and'          shift, and enter state 66
	'or'           shift, and enter state 67
	';'            shift, and enter state 109
	'?'            shift, and enter state 69


State 88

	grouping -> '(' expression ')' .                    (rule 55)

	'+'            reduce using rule 55
	'-'            reduce using rule 55
	'*'            reduce using rule 55
	'/'            reduce using rule 55
	')'            reduce using rule 55
	'<'            reduce using rule 55
	'>'            reduce using rule 55
	'<='           reduce using rule 55
	'>='           reduce using rule 55
	'!='           reduce using rule 55
	'=='           reduce using rule 55
	'and'          reduce using rule 55
	'or'           reduce using rule 55
	';'            reduce using rule 55
	','            reduce using rule 55
	'?'            reduce using rule 55
	':'            reduce using rule 55


State 89

	block_statement -> '{' declarations '}' .           (rule 17)

	NUMBER         reduce using rule 17
	STRING         reduce using rule 17
	IDENTIFIER     reduce using rule 17
	'-'            reduce using rule 17
	'('            reduce using rule 17
	'{'            reduce using rule 17
	'}'            reduce using rule 17
	'!'            reduce using rule 17
	'true'         reduce using rule 17
	'false'        reduce using rule 17
	'nil'          reduce using rule 17
	'print'        reduce using rule 17
	'var'          reduce using rule 17
	'if'           reduce using rule 17
	'else'         reduce using rule 17
	'while'        reduce using rule 17
	'for'          reduce using rule 17
	'fun'          reduce using rule 17
	'return'       reduce using rule 17
	'class'        reduce using rule 17
	%eof           reduce using rule 17


State 90

	print_statement -> 'print' expression ';' .         (rule 16)

	NUMBER         reduce using rule 16
	STRING         reduce using rule 16
	IDENTIFIER     reduce using rule 16
	'-'            reduce using rule 16
	'('            reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16
	'!'            reduce using rule 16
	'true'         reduce using rule 16
	'false'        reduce using rule 16
	'nil'          reduce using rule 16
	'print'        reduce using rule 16
	'var'          reduce using rule 16
	'if'           reduce using rule 16
	'else'         reduce using rule 16
	'while'        reduce using rule 16
	'for'          reduce using rule 16
	'fun'          reduce using rule 16
	'return'       reduce using rule 16
	'class'        reduce using rule 16
	%eof           reduce using rule 16


State 91

	variable_declaration -> 'var' IDENTIFIER '=' . expression ';'    (rule 30)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 108
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 92

	variable_declaration -> 'var' IDENTIFIER ';' .      (rule 31)

	NUMBER         reduce using rule 31
	STRING         reduce using rule 31
	IDENTIFIER     reduce using rule 31
	'-'            reduce using rule 31
	'('            reduce using rule 31
	'{'            reduce using rule 31
	'}'            reduce using rule 31
	'!'            reduce using rule 31
	'true'         reduce using rule 31
	'false'        reduce using rule 31
	'nil'          reduce using rule 31
	';'            reduce using rule 31
	'print'        reduce using rule 31
	'var'          reduce using rule 31
	'if'           reduce using rule 31
	'while'        reduce using rule 31
	'for'          reduce using rule 31
	'fun'          reduce using rule 31
	'return'       reduce using rule 31
	'class'        reduce using rule 31
	%eof           reduce using rule 31


State 93

	conditional_statement -> 'if' '(' expression . ')' statement    (rule 18)
	conditional_statement -> 'if' '(' expression . ')' statement 'else' statement    (rule 19)
	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	')'            shift, and enter state 107
	'<'            shift, and enter state 60
	'>'            shift, and enter state 61
	'<='           shift, and enter state 62
	'>='           shift, and enter state 63
	'!='           shift, and enter state 64
	'=='           shift, and enter state 65
	'and'          shift, and enter state 66
	'or'           shift, and enter state 67
	'?'            shift, and enter state 69


State 94

	while_statement -> 'while' '(' expression . ')' statement    (rule 20)
	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	')'            shift, and enter state 106
	'<'            shift, and enter state 60
	'>'            shift, and enter state 61
	'<='           shift, and enter state 62
	'>='           shift, and enter state 63
	'!='           shift, and enter state 64
	'=='           shift, and enter state 65
	'and'          shift, and enter state 66
	'or'           shift, and enter state 67
	'?'            shift, and enter state 69


State 95

	for_statement -> 'for' '(' variable_declaration . ';' ';' ')' statement    (rule 22)
	for_statement -> 'for' '(' variable_declaration . ';' expression ';' ')' statement    (rule 25)
	for_statement -> 'for' '(' variable_declaration . ';' ';' expression ')' statement    (rule 26)
	for_statement -> 'for' '(' variable_declaration . ';' expression ';' expression ')' statement    (rule 28)

	';'            shift, and enter state 105


State 96

	variable_declaration -> IDENTIFIER . '=' expression ';'    (rule 32)

	'='            shift, and enter state 54


State 97

	for_statement -> 'for' '(' ';' . ';' ')' statement    (rule 21)
	for_statement -> 'for' '(' ';' . expression ';' ')' statement    (rule 23)
	for_statement -> 'for' '(' ';' . ';' expression ')' statement    (rule 24)
	for_statement -> 'for' '(' ';' . expression ';' expression ')' statement    (rule 27)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31
	';'            shift, and enter state 104

	function_call  goto state 15
	expression     goto state 103
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 98

	function_declaration -> 'fun' IDENTIFIER '(' . parameters ')' block_statement    (rule 36)

	')'            reduce using rule 39
	','            reduce using rule 39

	parameters     goto state 102

State 99

	return_statement -> 'return' expression ';' .       (rule 29)

	NUMBER         reduce using rule 29
	STRING         reduce using rule 29
	IDENTIFIER     reduce using rule 29
	'-'            reduce using rule 29
	'('            reduce using rule 29
	'{'            reduce using rule 29
	'}'            reduce using rule 29
	'!'            reduce using rule 29
	'true'         reduce using rule 29
	'false'        reduce using rule 29
	'nil'          reduce using rule 29
	'print'        reduce using rule 29
	'var'          reduce using rule 29
	'if'           reduce using rule 29
	'else'         reduce using rule 29
	'while'        reduce using rule 29
	'for'          reduce using rule 29
	'fun'          reduce using rule 29
	'return'       reduce using rule 29
	'class'        reduce using rule 29
	%eof           reduce using rule 29


State 100

	class_declaration -> 'class' IDENTIFIER '{' . methods '}'    (rule 33)

	IDENTIFIER     reduce using rule 34
	'}'            reduce using rule 34

	methods        goto state 101

State 101

	class_declaration -> 'class' IDENTIFIER '{' methods . '}'    (rule 33)
	methods -> methods . method_declaration             (rule 35)

	IDENTIFIER     shift, and enter state 127
	'}'            shift, and enter state 128

	method_declarationgoto state 126

State 102

	function_declaration -> 'fun' IDENTIFIER '(' parameters . ')' block_statement    (rule 36)
	parameters -> parameters . ',' IDENTIFIER           (rule 38)

	')'            shift, and enter state 124
	','            shift, and enter state 125


State 103

	for_statement -> 'for' '(' ';' expression . ';' ')' statement    (rule 23)
	for_statement -> 'for' '(' ';' expression . ';' expression ')' statement    (rule 27)
	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	'<'            shift, and enter state 60
	'>'            shift, and enter state 61
	'<='           shift, and enter state 62
	'>='           shift, and enter state 63
	'!='           shift, and enter state 64
	'=='           shift, and enter state 65
	'and'          shift, and enter state 66
	'or'           shift, and enter state 67
	';'            shift, and enter state 123
	'?'            shift, and enter state 69


State 104

	for_statement -> 'for' '(' ';' ';' . ')' statement    (rule 21)
	for_statement -> 'for' '(' ';' ';' . expression ')' statement    (rule 24)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	')'            shift, and enter state 122
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 121
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 105

	for_statement -> 'for' '(' variable_declaration ';' . ';' ')' statement    (rule 22)
	for_statement -> 'for' '(' variable_declaration ';' . expression ';' ')' statement    (rule 25)
	for_statement -> 'for' '(' variable_declaration ';' . ';' expression ')' statement    (rule 26)
	for_statement -> 'for' '(' variable_declaration ';' . expression ';' expression ')' statement    (rule 28)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31
	';'            shift, and enter state 120

	function_call  goto state 15
	expression     goto state 119
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 106

	while_statement -> 'while' '(' expression ')' . statement    (rule 20)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'{'            shift, and enter state 27
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31
	'print'        shift, and enter state 32
	'if'           shift, and enter state 34
	'while'        shift, and enter state 35
	'for'          shift, and enter state 36
	'return'       shift, and enter state 38

	statement      goto state 118
	expression_statementgoto state 5
	print_statementgoto state 6
	block_statementgoto state 7
	conditional_statementgoto state 8
	while_statementgoto state 9
	for_statement  goto state 10
	return_statementgoto state 11
	function_call  goto state 15
	expression     goto state 16
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 107

	conditional_statement -> 'if' '(' expression ')' . statement    (rule 18)
	conditional_statement -> 'if' '(' expression ')' . statement 'else' statement    (rule 19)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'{'            shift, and enter state 27
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31
	'print'        shift, and enter state 32
	'if'           shift, and enter state 34
	'while'        shift, and enter state 35
	'for'          shift, and enter state 36
	'return'       shift, and enter state 38

	statement      goto state 117
	expression_statementgoto state 5
	print_statementgoto state 6
	block_statementgoto state 7
	conditional_statementgoto state 8
	while_statementgoto state 9
	for_statement  goto state 10
	return_statementgoto state 11
	function_call  goto state 15
	expression     goto state 16
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 108

	variable_declaration -> 'var' IDENTIFIER '=' expression . ';'    (rule 30)
	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	'<'            shift, and enter state 60
	'>'            shift, and enter state 61
	'<='           shift, and enter state 62
	'>='           shift, and enter state 63
	'!='           shift, and enter state 64
	'=='           shift, and enter state 65
	'and'          shift, and enter state 66
	'or'           shift, and enter state 67
	';'            shift, and enter state 116
	'?'            shift, and enter state 69


State 109

	variable_declaration -> IDENTIFIER '=' expression ';' .    (rule 32)

	NUMBER         reduce using rule 32
	STRING         reduce using rule 32
	IDENTIFIER     reduce using rule 32
	'-'            reduce using rule 32
	'('            reduce using rule 32
	'{'            reduce using rule 32
	'}'            reduce using rule 32
	'!'            reduce using rule 32
	'true'         reduce using rule 32
	'false'        reduce using rule 32
	'nil'          reduce using rule 32
	';'            reduce using rule 32
	'print'        reduce using rule 32
	'var'          reduce using rule 32
	'if'           reduce using rule 32
	'while'        reduce using rule 32
	'for'          reduce using rule 32
	'fun'          reduce using rule 32
	'return'       reduce using rule 32
	'class'        reduce using rule 32
	%eof           reduce using rule 32


State 110

	function_call -> IDENTIFIER '(' arguments ')' .     (rule 40)

	'+'            reduce using rule 40
	'-'            reduce using rule 40
	'*'            reduce using rule 40
	'/'            reduce using rule 40
	'('            reduce using rule 40
	')'            reduce using rule 40
	'<'            reduce using rule 40
	'>'            reduce using rule 40
	'<='           reduce using rule 40
	'>='           reduce using rule 40
	'!='           reduce using rule 40
	'=='           reduce using rule 40
	'and'          reduce using rule 40
	'or'           reduce using rule 40
	';'            reduce using rule 40
	','            reduce using rule 40
	'?'            reduce using rule 40
	':'            reduce using rule 40


State 111

	arguments -> arguments ',' . expression             (rule 42)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 115
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 112

	ternary -> expression '?' expression ':' . expression    (rule 70)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 114
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 113

	function_call -> function_call '(' arguments ')' .    (rule 41)

	'+'            reduce using rule 41
	'-'            reduce using rule 41
	'*'            reduce using rule 41
	'/'            reduce using rule 41
	'('            reduce using rule 41
	')'            reduce using rule 41
	'<'            reduce using rule 41
	'>'            reduce using rule 41
	'<='           reduce using rule 41
	'>='           reduce using rule 41
	'!='           reduce using rule 41
	'=='           reduce using rule 41
	'and'          reduce using rule 41
	'or'           reduce using rule 41
	';'            reduce using rule 41
	','            reduce using rule 41
	'?'            reduce using rule 41
	':'            reduce using rule 41


State 114

	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)
	ternary -> expression '?' expression ':' expression .    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	')'            reduce using rule 70
	'<'            shift, and enter state 60
	'>'            shift, and enter state 61
	'<='           shift, and enter state 62
	'>='           shift, and enter state 63
	'!='           shift, and enter state 64
	'=='           shift, and enter state 65
	'and'          shift, and enter state 66
	'or'           shift, and enter state 67
	';'            reduce using rule 70
	','            reduce using rule 70
	'?'            fail
	':'            reduce using rule 70


State 115

	arguments -> arguments ',' expression .             (rule 42)
	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	')'            reduce using rule 42
	'<'            shift, and enter state 60
	'>'            shift, and enter state 61
	'<='           shift, and enter state 62
	'>='           shift, and enter state 63
	'!='           shift, and enter state 64
	'=='           shift, and enter state 65
	'and'          shift, and enter state 66
	'or'           shift, and enter state 67
	','            reduce using rule 42
	'?'            shift, and enter state 69


State 116

	variable_declaration -> 'var' IDENTIFIER '=' expression ';' .    (rule 30)

	NUMBER         reduce using rule 30
	STRING         reduce using rule 30
	IDENTIFIER     reduce using rule 30
	'-'            reduce using rule 30
	'('            reduce using rule 30
	'{'            reduce using rule 30
	'}'            reduce using rule 30
	'!'            reduce using rule 30
	'true'         reduce using rule 30
	'false'        reduce using rule 30
	'nil'          reduce using rule 30
	';'            reduce using rule 30
	'print'        reduce using rule 30
	'var'          reduce using rule 30
	'if'           reduce using rule 30
	'while'        reduce using rule 30
	'for'          reduce using rule 30
	'fun'          reduce using rule 30
	'return'       reduce using rule 30
	'class'        reduce using rule 30
	%eof           reduce using rule 30


State 117

	conditional_statement -> 'if' '(' expression ')' statement .    (rule 18)
	conditional_statement -> 'if' '(' expression ')' statement . 'else' statement    (rule 19)

	NUMBER         reduce using rule 18
	STRING         reduce using rule 18
	IDENTIFIER     reduce using rule 18
	'-'            reduce using rule 18
	'('            reduce using rule 18
	'{'            reduce using rule 18
	'}'            reduce using rule 18
	'!'            reduce using rule 18
	'true'         reduce using rule 18
	'false'        reduce using rule 18
	'nil'          reduce using rule 18
	'print'        reduce using rule 18
	'var'          reduce using rule 18
	'if'           reduce using rule 18
	'else'         shift, and enter state 139
			(reduce using rule 18)

	'while'        reduce using rule 18
	'for'          reduce using rule 18
	'fun'          reduce using rule 18
	'return'       reduce using rule 18
	'class'        reduce using rule 18
	%eof           reduce using rule 18


State 118

	while_statement -> 'while' '(' expression ')' statement .    (rule 20)

	NUMBER         reduce using rule 20
	STRING         reduce using rule 20
	IDENTIFIER     reduce using rule 20
	'-'            reduce using rule 20
	'('            reduce using rule 20
	'{'            reduce using rule 20
	'}'            reduce using rule 20
	'!'            reduce using rule 20
	'true'         reduce using rule 20
	'false'        reduce using rule 20
	'nil'          reduce using rule 20
	'print'        reduce using rule 20
	'var'          reduce using rule 20
	'if'           reduce using rule 20
	'else'         reduce using rule 20
	'while'        reduce using rule 20
	'for'          reduce using rule 20
	'fun'          reduce using rule 20
	'return'       reduce using rule 20
	'class'        reduce using rule 20
	%eof           reduce using rule 20


State 119

	for_statement -> 'for' '(' variable_declaration ';' expression . ';' ')' statement    (rule 25)
	for_statement -> 'for' '(' variable_declaration ';' expression . ';' expression ')' statement    (rule 28)
	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	'<'            shift, and enter state 60
	'>'            shift, and enter state 61
	'<='           shift, and enter state 62
	'>='           shift, and enter state 63
	'!='           shift, and enter state 64
	'=='           shift, and enter state 65
	'and'          shift, and enter state 66
	'or'           shift, and enter state 67
	';'            shift, and enter state 138
	'?'            shift, and enter state 69


State 120

	for_statement -> 'for' '(' variable_declaration ';' ';' . ')' statement    (rule 22)
	for_statement -> 'for' '(' variable_declaration ';' ';' . expression ')' statement    (rule 26)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	')'            shift, and enter state 137
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 136
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 121

	for_statement -> 'for' '(' ';' ';' expression . ')' statement    (rule 24)
	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	')'            shift, and enter state 135
	'<'            shift, and enter state 60
	'>'            shift, and enter state 61
	'<='           shift, and enter state 62
	'>='           shift, and enter state 63
	'!='           shift, and enter state 64
	'=='           shift, and enter state 65
	'and'          shift, and enter state 66
	'or'           shift, and enter state 67
	'?'            shift, and enter state 69


State 122

	for_statement -> 'for' '(' ';' ';' ')' . statement    (rule 21)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'{'            shift, and enter state 27
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31
	'print'        shift, and enter state 32
	'if'           shift, and enter state 34
	'while'        shift, and enter state 35
	'for'          shift, and enter state 36
	'return'       shift, and enter state 38

	statement      goto state 134
	expression_statementgoto state 5
	print_statementgoto state 6
	block_statementgoto state 7
	conditional_statementgoto state 8
	while_statementgoto state 9
	for_statement  goto state 10
	return_statementgoto state 11
	function_call  goto state 15
	expression     goto state 16
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 123

	for_statement -> 'for' '(' ';' expression ';' . ')' statement    (rule 23)
	for_statement -> 'for' '(' ';' expression ';' . expression ')' statement    (rule 27)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	')'            shift, and enter state 133
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 132
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 124

	function_declaration -> 'fun' IDENTIFIER '(' parameters ')' . block_statement    (rule 36)

	'{'            shift, and enter state 27

	block_statementgoto state 131

State 125

	parameters -> parameters ',' . IDENTIFIER           (rule 38)

	IDENTIFIER     shift, and enter state 130


State 126

	methods -> methods method_declaration .             (rule 35)

	IDENTIFIER     reduce using rule 35
	'}'            reduce using rule 35


State 127

	method_declaration -> IDENTIFIER . '(' parameters ')' block_statement    (rule 37)

	'('            shift, and enter state 129


State 128

	class_declaration -> 'class' IDENTIFIER '{' methods '}' .    (rule 33)

	NUMBER         reduce using rule 33
	STRING         reduce using rule 33
	IDENTIFIER     reduce using rule 33
	'-'            reduce using rule 33
	'('            reduce using rule 33
	'{'            reduce using rule 33
	'}'            reduce using rule 33
	'!'            reduce using rule 33
	'true'         reduce using rule 33
	'false'        reduce using rule 33
	'nil'          reduce using rule 33
	'print'        reduce using rule 33
	'var'          reduce using rule 33
	'if'           reduce using rule 33
	'while'        reduce using rule 33
	'for'          reduce using rule 33
	'fun'          reduce using rule 33
	'return'       reduce using rule 33
	'class'        reduce using rule 33
	%eof           reduce using rule 33


State 129

	method_declaration -> IDENTIFIER '(' . parameters ')' block_statement    (rule 37)

	')'            reduce using rule 39
	','            reduce using rule 39

	parameters     goto state 148

State 130

	parameters -> parameters ',' IDENTIFIER .           (rule 38)

	')'            reduce using rule 38
	','            reduce using rule 38


State 131

	function_declaration -> 'fun' IDENTIFIER '(' parameters ')' block_statement .    (rule 36)

	NUMBER         reduce using rule 36
	STRING         reduce using rule 36
	IDENTIFIER     reduce using rule 36
	'-'            reduce using rule 36
	'('            reduce using rule 36
	'{'            reduce using rule 36
	'}'            reduce using rule 36
	'!'            reduce using rule 36
	'true'         reduce using rule 36
	'false'        reduce using rule 36
	'nil'          reduce using rule 36
	'print'        reduce using rule 36
	'var'          reduce using rule 36
	'if'           reduce using rule 36
	'while'        reduce using rule 36
	'for'          reduce using rule 36
	'fun'          reduce using rule 36
	'return'       reduce using rule 36
	'class'        reduce using rule 36
	%eof           reduce using rule 36


State 132

	for_statement -> 'for' '(' ';' expression ';' expression . ')' statement    (rule 27)
	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	')'            shift, and enter state 147
	'<'            shift, and enter state 60
	'>'            shift, and enter state 61
	'<='           shift, and enter state 62
	'>='           shift, and enter state 63
	'!='           shift, and enter state 64
	'=='           shift, and enter state 65
	'and'          shift, and enter state 66
	'or'           shift, and enter state 67
	'?'            shift, and enter state 69


State 133

	for_statement -> 'for' '(' ';' expression ';' ')' . statement    (rule 23)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'{'            shift, and enter state 27
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31
	'print'        shift, and enter state 32
	'if'           shift, and enter state 34
	'while'        shift, and enter state 35
	'for'          shift, and enter state 36
	'return'       shift, and enter state 38

	statement      goto state 146
	expression_statementgoto state 5
	print_statementgoto state 6
	block_statementgoto state 7
	conditional_statementgoto state 8
	while_statementgoto state 9
	for_statement  goto state 10
	return_statementgoto state 11
	function_call  goto state 15
	expression     goto state 16
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 134

	for_statement -> 'for' '(' ';' ';' ')' statement .    (rule 21)

	NUMBER         reduce using rule 21
	STRING         reduce using rule 21
	IDENTIFIER     reduce using rule 21
	'-'            reduce using rule 21
	'('            reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21
	'!'            reduce using rule 21
	'true'         reduce using rule 21
	'false'        reduce using rule 21
	'nil'          reduce using rule 21
	'print'        reduce using rule 21
	'var'          reduce using rule 21
	'if'           reduce using rule 21
	'else'         reduce using rule 21
	'while'        reduce using rule 21
	'for'          reduce using rule 21
	'fun'          reduce using rule 21
	'return'       reduce using rule 21
	'class'        reduce using rule 21
	%eof           reduce using rule 21


State 135

	for_statement -> 'for' '(' ';' ';' expression ')' . statement    (rule 24)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'{'            shift, and enter state 27
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31
	'print'        shift, and enter state 32
	'if'           shift, and enter state 34
	'while'        shift, and enter state 35
	'for'          shift, and enter state 36
	'return'       shift, and enter state 38

	statement      goto state 145
	expression_statementgoto state 5
	print_statementgoto state 6
	block_statementgoto state 7
	conditional_statementgoto state 8
	while_statementgoto state 9
	for_statement  goto state 10
	return_statementgoto state 11
	function_call  goto state 15
	expression     goto state 16
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 136

	for_statement -> 'for' '(' variable_declaration ';' ';' expression . ')' statement    (rule 26)
	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	')'            shift, and enter state 144
	'<'            shift, and enter state 60
	'>'            shift, and enter state 61
	'<='           shift, and enter state 62
	'>='           shift, and enter state 63
	'!='           shift, and enter state 64
	'=='           shift, and enter state 65
	'and'          shift, and enter state 66
	'or'           shift, and enter state 67
	'?'            shift, and enter state 69


State 137

	for_statement -> 'for' '(' variable_declaration ';' ';' ')' . statement    (rule 22)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'{'            shift, and enter state 27
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31
	'print'        shift, and enter state 32
	'if'           shift, and enter state 34
	'while'        shift, and enter state 35
	'for'          shift, and enter state 36
	'return'       shift, and enter state 38

	statement      goto state 143
	expression_statementgoto state 5
	print_statementgoto state 6
	block_statementgoto state 7
	conditional_statementgoto state 8
	while_statementgoto state 9
	for_statement  goto state 10
	return_statementgoto state 11
	function_call  goto state 15
	expression     goto state 16
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 138

	for_statement -> 'for' '(' variable_declaration ';' expression ';' . ')' statement    (rule 25)
	for_statement -> 'for' '(' variable_declaration ';' expression ';' . expression ')' statement    (rule 28)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	')'            shift, and enter state 142
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31

	function_call  goto state 15
	expression     goto state 141
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 139

	conditional_statement -> 'if' '(' expression ')' statement 'else' . statement    (rule 19)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'{'            shift, and enter state 27
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31
	'print'        shift, and enter state 32
	'if'           shift, and enter state 34
	'while'        shift, and enter state 35
	'for'          shift, and enter state 36
	'return'       shift, and enter state 38

	statement      goto state 140
	expression_statementgoto state 5
	print_statementgoto state 6
	block_statementgoto state 7
	conditional_statementgoto state 8
	while_statementgoto state 9
	for_statement  goto state 10
	return_statementgoto state 11
	function_call  goto state 15
	expression     goto state 16
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 140

	conditional_statement -> 'if' '(' expression ')' statement 'else' statement .    (rule 19)

	NUMBER         reduce using rule 19
	STRING         reduce using rule 19
	IDENTIFIER     reduce using rule 19
	'-'            reduce using rule 19
	'('            reduce using rule 19
	'{'            reduce using rule 19
	'}'            reduce using rule 19
	'!'            reduce using rule 19
	'true'         reduce using rule 19
	'false'        reduce using rule 19
	'nil'          reduce using rule 19
	'print'        reduce using rule 19
	'var'          reduce using rule 19
	'if'           reduce using rule 19
	'else'         reduce using rule 19
	'while'        reduce using rule 19
	'for'          reduce using rule 19
	'fun'          reduce using rule 19
	'return'       reduce using rule 19
	'class'        reduce using rule 19
	%eof           reduce using rule 19


State 141

	for_statement -> 'for' '(' variable_declaration ';' expression ';' expression . ')' statement    (rule 28)
	binary -> expression . '==' expression              (rule 58)
	binary -> expression . '!=' expression              (rule 59)
	binary -> expression . '+' expression               (rule 60)
	binary -> expression . '-' expression               (rule 61)
	binary -> expression . '*' expression               (rule 62)
	binary -> expression . '/' expression               (rule 63)
	binary -> expression . '>' expression               (rule 64)
	binary -> expression . '<' expression               (rule 65)
	binary -> expression . '>=' expression              (rule 66)
	binary -> expression . '<=' expression              (rule 67)
	binary -> expression . 'and' expression             (rule 68)
	binary -> expression . 'or' expression              (rule 69)
	ternary -> expression . '?' expression ':' expression    (rule 70)

	'+'            shift, and enter state 56
	'-'            shift, and enter state 57
	'*'            shift, and enter state 58
	'/'            shift, and enter state 59
	')'            shift, and enter state 153
	'<'            shift, and enter state 60
	'>'            shift, and enter state 61
	'<='           shift, and enter state 62
	'>='           shift, and enter state 63
	'!='           shift, and enter state 64
	'=='           shift, and enter state 65
	'and'          shift, and enter state 66
	'or'           shift, and enter state 67
	'?'            shift, and enter state 69


State 142

	for_statement -> 'for' '(' variable_declaration ';' expression ';' ')' . statement    (rule 25)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'{'            shift, and enter state 27
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31
	'print'        shift, and enter state 32
	'if'           shift, and enter state 34
	'while'        shift, and enter state 35
	'for'          shift, and enter state 36
	'return'       shift, and enter state 38

	statement      goto state 152
	expression_statementgoto state 5
	print_statementgoto state 6
	block_statementgoto state 7
	conditional_statementgoto state 8
	while_statementgoto state 9
	for_statement  goto state 10
	return_statementgoto state 11
	function_call  goto state 15
	expression     goto state 16
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 143

	for_statement -> 'for' '(' variable_declaration ';' ';' ')' statement .    (rule 22)

	NUMBER         reduce using rule 22
	STRING         reduce using rule 22
	IDENTIFIER     reduce using rule 22
	'-'            reduce using rule 22
	'('            reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22
	'!'            reduce using rule 22
	'true'         reduce using rule 22
	'false'        reduce using rule 22
	'nil'          reduce using rule 22
	'print'        reduce using rule 22
	'var'          reduce using rule 22
	'if'           reduce using rule 22
	'else'         reduce using rule 22
	'while'        reduce using rule 22
	'for'          reduce using rule 22
	'fun'          reduce using rule 22
	'return'       reduce using rule 22
	'class'        reduce using rule 22
	%eof           reduce using rule 22


State 144

	for_statement -> 'for' '(' variable_declaration ';' ';' expression ')' . statement    (rule 26)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'{'            shift, and enter state 27
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31
	'print'        shift, and enter state 32
	'if'           shift, and enter state 34
	'while'        shift, and enter state 35
	'for'          shift, and enter state 36
	'return'       shift, and enter state 38

	statement      goto state 151
	expression_statementgoto state 5
	print_statementgoto state 6
	block_statementgoto state 7
	conditional_statementgoto state 8
	while_statementgoto state 9
	for_statement  goto state 10
	return_statementgoto state 11
	function_call  goto state 15
	expression     goto state 16
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 145

	for_statement -> 'for' '(' ';' ';' expression ')' statement .    (rule 24)

	NUMBER         reduce using rule 24
	STRING         reduce using rule 24
	IDENTIFIER     reduce using rule 24
	'-'            reduce using rule 24
	'('            reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24
	'!'            reduce using rule 24
	'true'         reduce using rule 24
	'false'        reduce using rule 24
	'nil'          reduce using rule 24
	'print'        reduce using rule 24
	'var'          reduce using rule 24
	'if'           reduce using rule 24
	'else'         reduce using rule 24
	'while'        reduce using rule 24
	'for'          reduce using rule 24
	'fun'          reduce using rule 24
	'return'       reduce using rule 24
	'class'        reduce using rule 24
	%eof           reduce using rule 24


State 146

	for_statement -> 'for' '(' ';' expression ';' ')' statement .    (rule 23)

	NUMBER         reduce using rule 23
	STRING         reduce using rule 23
	IDENTIFIER     reduce using rule 23
	'-'            reduce using rule 23
	'('            reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23
	'!'            reduce using rule 23
	'true'         reduce using rule 23
	'false'        reduce using rule 23
	'nil'          reduce using rule 23
	'print'        reduce using rule 23
	'var'          reduce using rule 23
	'if'           reduce using rule 23
	'else'         reduce using rule 23
	'while'        reduce using rule 23
	'for'          reduce using rule 23
	'fun'          reduce using rule 23
	'return'       reduce using rule 23
	'class'        reduce using rule 23
	%eof           reduce using rule 23


State 147

	for_statement -> 'for' '(' ';' expression ';' expression ')' . statement    (rule 27)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'{'            shift, and enter state 27
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31
	'print'        shift, and enter state 32
	'if'           shift, and enter state 34
	'while'        shift, and enter state 35
	'for'          shift, and enter state 36
	'return'       shift, and enter state 38

	statement      goto state 150
	expression_statementgoto state 5
	print_statementgoto state 6
	block_statementgoto state 7
	conditional_statementgoto state 8
	while_statementgoto state 9
	for_statement  goto state 10
	return_statementgoto state 11
	function_call  goto state 15
	expression     goto state 16
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 148

	method_declaration -> IDENTIFIER '(' parameters . ')' block_statement    (rule 37)
	parameters -> parameters . ',' IDENTIFIER           (rule 38)

	')'            shift, and enter state 149
	','            shift, and enter state 125


State 149

	method_declaration -> IDENTIFIER '(' parameters ')' . block_statement    (rule 37)

	'{'            shift, and enter state 27

	block_statementgoto state 155

State 150

	for_statement -> 'for' '(' ';' expression ';' expression ')' statement .    (rule 27)

	NUMBER         reduce using rule 27
	STRING         reduce using rule 27
	IDENTIFIER     reduce using rule 27
	'-'            reduce using rule 27
	'('            reduce using rule 27
	'{'            reduce using rule 27
	'}'            reduce using rule 27
	'!'            reduce using rule 27
	'true'         reduce using rule 27
	'false'        reduce using rule 27
	'nil'          reduce using rule 27
	'print'        reduce using rule 27
	'var'          reduce using rule 27
	'if'           reduce using rule 27
	'else'         reduce using rule 27
	'while'        reduce using rule 27
	'for'          reduce using rule 27
	'fun'          reduce using rule 27
	'return'       reduce using rule 27
	'class'        reduce using rule 27
	%eof           reduce using rule 27


State 151

	for_statement -> 'for' '(' variable_declaration ';' ';' expression ')' statement .    (rule 26)

	NUMBER         reduce using rule 26
	STRING         reduce using rule 26
	IDENTIFIER     reduce using rule 26
	'-'            reduce using rule 26
	'('            reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26
	'!'            reduce using rule 26
	'true'         reduce using rule 26
	'false'        reduce using rule 26
	'nil'          reduce using rule 26
	'print'        reduce using rule 26
	'var'          reduce using rule 26
	'if'           reduce using rule 26
	'else'         reduce using rule 26
	'while'        reduce using rule 26
	'for'          reduce using rule 26
	'fun'          reduce using rule 26
	'return'       reduce using rule 26
	'class'        reduce using rule 26
	%eof           reduce using rule 26


State 152

	for_statement -> 'for' '(' variable_declaration ';' expression ';' ')' statement .    (rule 25)

	NUMBER         reduce using rule 25
	STRING         reduce using rule 25
	IDENTIFIER     reduce using rule 25
	'-'            reduce using rule 25
	'('            reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25
	'!'            reduce using rule 25
	'true'         reduce using rule 25
	'false'        reduce using rule 25
	'nil'          reduce using rule 25
	'print'        reduce using rule 25
	'var'          reduce using rule 25
	'if'           reduce using rule 25
	'else'         reduce using rule 25
	'while'        reduce using rule 25
	'for'          reduce using rule 25
	'fun'          reduce using rule 25
	'return'       reduce using rule 25
	'class'        reduce using rule 25
	%eof           reduce using rule 25


State 153

	for_statement -> 'for' '(' variable_declaration ';' expression ';' expression ')' . statement    (rule 28)

	NUMBER         shift, and enter state 22
	STRING         shift, and enter state 23
	IDENTIFIER     shift, and enter state 43
	'-'            shift, and enter state 25
	'('            shift, and enter state 26
	'{'            shift, and enter state 27
	'!'            shift, and enter state 28
	'true'         shift, and enter state 29
	'false'        shift, and enter state 30
	'nil'          shift, and enter state 31
	'print'        shift, and enter state 32
	'if'           shift, and enter state 34
	'while'        shift, and enter state 35
	'for'          shift, and enter state 36
	'return'       shift, and enter state 38

	statement      goto state 154
	expression_statementgoto state 5
	print_statementgoto state 6
	block_statementgoto state 7
	conditional_statementgoto state 8
	while_statementgoto state 9
	for_statement  goto state 10
	return_statementgoto state 11
	function_call  goto state 15
	expression     goto state 16
	literal        goto state 17
	grouping       goto state 18
	unary          goto state 19
	binary         goto state 20
	ternary        goto state 21

State 154

	for_statement -> 'for' '(' variable_declaration ';' expression ';' expression ')' statement .    (rule 28)

	NUMBER         reduce using rule 28
	STRING         reduce using rule 28
	IDENTIFIER     reduce using rule 28
	'-'            reduce using rule 28
	'('            reduce using rule 28
	'{'            reduce using rule 28
	'}'            reduce using rule 28
	'!'            reduce using rule 28
	'true'         reduce using rule 28
	'false'        reduce using rule 28
	'nil'          reduce using rule 28
	'print'        reduce using rule 28
	'var'          reduce using rule 28
	'if'           reduce using rule 28
	'else'         reduce using rule 28
	'while'        reduce using rule 28
	'for'          reduce using rule 28
	'fun'          reduce using rule 28
	'return'       reduce using rule 28
	'class'        reduce using rule 28
	%eof           reduce using rule 28


State 155

	method_declaration -> IDENTIFIER '(' parameters ')' block_statement .    (rule 37)

	IDENTIFIER     reduce using rule 37
	'}'            reduce using rule 37


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 71
Number of terminals: 37
Number of non-terminals: 26
Number of states: 156
