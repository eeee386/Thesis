-- while writes out a plus false

var a = clock(); for (var i = 0; i < 1000000; i = i+1) {i;} var b = clock(); print b-a;

fun a(){return 5;} print a();

fun count(n) {while (n < 5) {if (n == 3) {print n;} n = n + 1;}} print count(1);

fun count(n) {while (n < 5) {print n; n = n + 1;}} print count(1);

fun count(n) {for (var i = 0; i < 5; i = i+1){ print i;}} count(1);

var a = 0; while(a < 5) {if(a == 3) {print a; break;} a=a+1; }

var a = 0; while(a < 5) {if(a == 3) {print a+6; break;} print a; a=a+1; }

var a = 0; while(a < 5) {if(a == 3) {a = a+1; continue;} a=a+1; print a; } print a;


for (var i = 0; i < 5; i = i+1){ print i;}

var a = 5; for (var i = 0; i < 5; i = i+1){ print i;}

var a = 5; if (a == 5){ print a*2; }
var a = 4; if (a <= 5){print a*2;}


for (var i = 0; i < 5; i = i+1){print i;}

// Fix "if without block, it does not see return after first return"
fun fib(n) {if (n <= 1) {return n;} return fib(n-2) + fib(n-1);} for (var i = 0; i < 20; i = i + 1) {print fib(i);}

fun addOne(n){print n; if (n == 5) {return n;} return addOne(n+1);} addOne(1);

fun ret(n){if(!n) {return n-1;} return n-3;} print ret(5);
fun ret(n){if(n) {return n-1;} return n-3;} print ret(5);

var n = 1 ;fun addOne(n){print n; if (n == 5) {return n;} return addOne(n+1);} addOne(n); print n;

fun a(n) {return n;} var b = a(5); print b;


fun addOne(n){print n; if (n > 7) {return n;} return addOne(n+1) + addOne(n+3);} addOne(1);


fun a(n) {return n;} fun b(n) {return a(n-1)+a(n-2);} print b(5) + b(4);

fun a(n) {return n;} fun b(n) {return a(n-1)+a(n-2);} print b(5);

fun a(n) {return n-1;} print a(5);

fun a(n) {return n;} print a(5);

fun add(a,b) {return a+b;} print add(1+3,2);

var n = 0; add(1,3)(1, 2);


fun makeCounter() {var i = 0; fun count() {i = i + 1;print i;}return count;}var counter = makeCounter(); print counter(); print counter();
fun makeCounter() {var i = 0; fun count() {i = i + 1;print i;}return count;}var counter = makeCounter()(); print counter;

var a = "global";{fun showA() {print a;}showA();var a = "block";showA();}

var a = 5; {a = 4;} print a;

var a = 5; if(a){print a;}

var a=5; {var a = 3; a = a+1;} print a;


class Breakfast {cook() {print \"Eggs a-fryin'!\";} serve(who) {print \"Enjoy your breakfast + \" + who + \".\";}} var a = Breakfast(); print a;


// together
// Function declarations were originally ID based but realized this edge case, where I realized the z would redeclare w and overwrite y's w declaration
fun v(a) {
    fun w() {print a;}
    return w;
}

fun x(){
    var y = v(5);
    var z = v(4);
    y();
}
x();

// w should write out 5;

//
fun b(){}

class A{
 init(){}
}
//

// This edgecase does not work right now
fun a(b, c){
    class Animal{
        init(){
          print 1;
        }

        hello() {
          print b;
        }
    }
    return Animal;
}
var d = a(1,2)();
d.hello();
//

//
var a;
a();
//


//
fun a() {
  print "dummy"
}

a = 5;
//

//
class A{
  init(){
    this.name = "Hello";
  }
  cook(){
    print "cook";
  }
}

class B < A {
  init(){
    super.init();
  }
}

var c = B();
c.cook();
print c.name;
//

//
fun a() {
  var i = 0;
  fun e(){
    var i = 2;
    print i;
  }
  return e;
}

var b = a();
b();
//

//
var a = 1;

class B {
  init(){
    print 1;
  }

  changeA(){
    a = a + 1;
  }
}
fun c() {
  B().changeA();
}
c();
print a;
//

//
class A{
  init(){
    print "A";
  }
  cook(){
    print "cook";
  }
}

class B < A{
  init(){
    print "B";
    super.init();
  }
}

class C < B{
  init(){
    print "C";
    super.init();
  }
}

var d = C();
d.cook();

//
class A{
  init(){
    print "A";
  }
  cook(){
    print "cook";
  }
}

class B < A{
  init(){
    print "B";
    super.init();
  }

  cook(){
    super.cook();
    print "coming from B";
  }
}

var c = B();
c.cook();

//
class B{
  init(){
    this.name = "B";
  }
}

class A{
  init(){
    this.bClass = B();
    this.aName = "A";
  }
}
var a = A();
print a.bClass.name;
//

//
class B{
  init(){
    this.name = "B";
  }
  sayName(){
    print this.name;
  }
}

B().sayName();
//


// Runtime closure
fun d(){
fun b() {
fun a(){
  -(true);

}
return a;
}
return b;
}

var c = d()()();
print 5;


// different closures (does not parse)
fun a() {
    var e = 1;
    fun b(){
        e = e+1;
        print e;
        return e;
    }
    fun c(){
        e = e+2;
        print e;
        return e;
    }
    class A{
      init(){
        this.b = b;
        this.c = c;
      }
    }

    return A;
}

var test1 = a();
var test = test1();
test.b();
test.b();
test.c();
test.c();

//
var a = 5;
if (a == 5) print a;